import os
import streamlit as st
import pandas as pd
import hashlib
import json
from datetime import datetime
from typing import List, Dict, Optional
from st_aggrid import AgGrid, GridOptionsBuilder, GridUpdateMode
import plotly.express as px
import plotly.graph_objects as go
import sys

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from core.database.supabase_database import SupabaseDatabase
from core.models.professor import Professor
from core.models.curso import Cursos
from core.models.disciplinas import Disciplinas
from core.models.analise import Analise
from core.models.ementa import Ementa, EmentaCreate
from core.services.google_drive_service import GoogleDriveService

# Adicionar o diret√≥rio raiz do projeto ao path para importar o m√≥dulo ai
project_root = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
sys.path.append(project_root)
from ai import GroqClient

# Inicializa a base de dados
database = SupabaseDatabase()
# Para opera√ß√µes administrativas (cadastro), usar service role
from core.config.supabase_config import supabase_config
database.client = supabase_config.get_client(use_service_role=True)

# Inicializa o servi√ßo do Google Drive
drive_service = GoogleDriveService()

# Configura a p√°gina do Streamlit
st.set_page_config(
    layout="wide", 
    page_title="Nexus Education", 
    page_icon="üéì",
    initial_sidebar_state="collapsed"
)

# CSS personalizado para melhorar a apar√™ncia
st.markdown("""
<style>
    .main-header {
        text-align: center;
        padding: 2rem 0;
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        color: white;
        border-radius: 10px;
        margin-bottom: 2rem;
    }
    .login-container {
        max-width: 500px;
        margin: 0 auto;
        padding: 2rem;
        border: 1px solid #ddd;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    .course-card {
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 1rem;
        margin: 0.5rem 0;
        background-color: #f8f9fa;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .course-card h4 {
        margin: 0 0 0.5rem 0;
        color: #2c3e50;
    }
    .course-card p {
        margin: 0;
        color: #7f8c8d;
    }
    .discipline-item {
        background-color: #ffffff;
        border: 1px solid #e9ecef;
        border-radius: 6px;
        padding: 0.75rem;
        margin: 0.25rem 0;
    }
    .discipline-item:hover {
        background-color: #f8f9fa;
    }
    .upload-area {
        border: 2px dashed #ccc;
        border-radius: 10px;
        padding: 2rem;
        text-align: center;
        background-color: #f9f9f9;
    }
    .success-message {
        background-color: #d4edda;
        color: #155724;
        padding: 1rem;
        border-radius: 5px;
        border: 1px solid #c3e6cb;
    }
    .error-message {
        background-color: #f8d7da;
        color: #721c24;
        padding: 1rem;
        border-radius: 5px;
        border: 1px solid #f5c6cb;
    }
</style>
""", unsafe_allow_html=True)

# Fun√ß√£o para verificar se o usu√°rio est√° logado
def is_logged_in():
    return 'user_logged_in' in st.session_state and st.session_state.user_logged_in

# Fun√ß√£o para lidar com erros de token do Google Drive
def handle_drive_token_error():
    """Lida com erros de token do Google Drive"""
    st.error("üîë Token do Google Drive expirado!")
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.markdown("""
        **Para resolver este problema:**
        
        1. **Op√ß√£o 1 - Renovar automaticamente:**
           - Clique no bot√£o "Renovar Token" abaixo
           - Siga as instru√ß√µes no navegador
        
        2. **Op√ß√£o 2 - Renovar manualmente:**
           - Execute: `python renovar_token.py`
           - Siga as instru√ß√µes no terminal
        
        3. **Op√ß√£o 3 - Processar sem Google Drive:**
           - Use apenas an√°lise local (sem upload)
        """)
    
    with col2:
        if st.button("üîÑ Renovar Token", type="primary"):
            try:
                # Tentar renovar o token
                if drive_service.authenticate():
                    st.success("‚úÖ Token renovado com sucesso!")
                    st.rerun()
                else:
                    st.error("‚ùå Falha ao renovar token. Tente a op√ß√£o manual.")
            except Exception as e:
                st.error(f"‚ùå Erro: {str(e)}")
        
        if st.button("üö´ Processar Sem Drive"):
            st.session_state['skip_drive'] = True
            st.success("‚úÖ Modo local ativado. PDFs ser√£o processados localmente.")
            st.rerun()

# Fun√ß√£o para fazer logout
def logout():
    for key in ['user_logged_in', 'user_data', 'selected_course']:
        if key in st.session_state:
            del st.session_state[key]

# Fun√ß√£o para hash da senha
def hash_password(password: str) -> str:
    return hashlib.sha256(password.encode()).hexdigest()

# Fun√ß√£o para converter datetime para string JSON-serializable
def convert_datetime_for_json(data: dict) -> dict:
    """Converte objetos datetime em strings para serializa√ß√£o JSON"""
    converted = data.copy()
    for key, value in converted.items():
        if isinstance(value, datetime):
            converted[key] = value.isoformat()
        elif isinstance(value, dict):
            converted[key] = convert_datetime_for_json(value)
    return converted

# Fun√ß√£o para validar email
def is_valid_email(email: str) -> bool:
    import re
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return re.match(pattern, email) is not None

# Fun√ß√£o para cadastrar professor
def register_professor(professor_data: Dict) -> bool:
    try:
        # Verificar se email j√° existe
        if database.verify_email_exists(professor_data['email_educacional']):
            st.error("Email j√° cadastrado!")
            return False
        
        # Verificar se prontu√°rio j√° existe
        if database.verify_prontuario_exists(professor_data['prontuario']):
            st.error("Prontu√°rio j√° cadastrado!")
            return False
        
        # Hash da senha
        professor_data['senha'] = hash_password(professor_data['senha'])
        
        # Criar professor - remover cursos dos dados do professor
        professor_info = {
            'prontuario': professor_data['prontuario'],
            'nome': professor_data['nome'],
            'email_educacional': professor_data['email_educacional'],
            'senha': professor_data['senha']
        }
        
        professor = Professor(**professor_info)
        database.create_professor(convert_datetime_for_json(professor.model_dump()))
        
        # Cadastrar cursos do professor
        for curso_data in professor_data.get('cursos', []):
            # Verificar se curso j√° existe
            existing_curso = database.get_curso_by_codigo(curso_data['codigo_curso'])
            if not existing_curso:
                # Criar curso
                curso = Cursos(**curso_data)
                database.create_curso(convert_datetime_for_json(curso.model_dump()))
            
            # Associar professor ao curso
            database.create_professor_curso_relationship(
                professor_data['prontuario'],
                curso_data['codigo_curso']
            )
            
            # Cadastrar disciplinas do curso
            for disciplina_data in curso_data.get('disciplinas', []):
                # Verificar se disciplina j√° existe
                existing_disciplina = database.get_disciplina_by_id(disciplina_data['id_disciplina'])
                if not existing_disciplina:
                    # Criar disciplina
                    disciplina = Disciplinas(**disciplina_data)
                    database.create_disciplina(convert_datetime_for_json(disciplina.model_dump()))
                
                # Associar disciplina ao curso
                database.create_curso_disciplina_relationship(
                    curso_data['codigo_curso'],
                    disciplina_data['id_disciplina']
                )
        
        return True
    except Exception as e:
        st.error(f"Erro ao cadastrar: {str(e)}")
        import traceback
        st.error(f"Detalhes do erro: {traceback.format_exc()}")
        return False

# Fun√ß√£o para autenticar professor por email
def authenticate_professor(email: str, senha: str) -> Optional[Dict]:
    try:
        senha_hash = hash_password(senha)
        # Usar service role para autentica√ß√£o tamb√©m
        from core.config.supabase_config import supabase_config
        temp_client = supabase_config.get_client(use_service_role=True)
        database.client = temp_client
        
        professor = database.authenticate_professor(email, senha_hash)
        if professor:
            return professor
        return None
    except Exception as e:
        st.error(f"Erro na autentica√ß√£o: {str(e)}")
        return None

# Fun√ß√£o para autenticar professor por prontu√°rio
def authenticate_professor_by_prontuario(prontuario: str, senha: str) -> Optional[Dict]:
    try:
        # Usar service role para autentica√ß√£o tamb√©m
        from core.config.supabase_config import supabase_config
        temp_client = supabase_config.get_client(use_service_role=True)
        database.client = temp_client
        
        # Passar a senha sem hash - a fun√ß√£o do banco j√° faz o hash
        professor = database.authenticate_professor_by_prontuario(prontuario, senha)
        if professor:
            return professor
        return None
    except Exception as e:
        st.error(f"Erro na autentica√ß√£o: {str(e)}")
        return None

# Fun√ß√£o unificada para autenticar professor (detecta automaticamente email ou prontu√°rio)
def authenticate_professor_unified(login_field: str, senha: str) -> Optional[Dict]:
    """Autentica professor detectando automaticamente se √© email ou prontu√°rio"""
    try:
        if is_valid_email(login_field):
            # √â um email
            return authenticate_professor(login_field, senha)
        elif len(login_field) == 9:
            # √â um prontu√°rio
            return authenticate_professor_by_prontuario(login_field, senha)
        else:
            return None
    except Exception as e:
        st.error(f"Erro na autentica√ß√£o: {str(e)}")
        return None

# Fun√ß√£o para upload de PDFs
def upload_pdfs(course_code: str, professor_prontuario: str) -> List[Dict]:
    uploaded_files = st.file_uploader(
        "Selecione os PDFs (Ementa + Hist√≥rico Escolar)",
        type=['pdf'],
        accept_multiple_files=True,
        help="M√≠nimo 1 PDF, m√°ximo 5 PDFs por lote"
    )
    
    if uploaded_files:
        if len(uploaded_files) < 1:
            st.error("Selecione pelo menos 1 PDF!")
            return []
        
        if len(uploaded_files) > 5:
            st.error("M√°ximo 5 PDFs por lote!")
            return []
        
        # Verificar se Google Drive est√° configurado
        drive_available = os.path.exists('credentials.json')
        
        if not drive_available:
            st.warning("‚ö†Ô∏è Google Drive n√£o configurado. Arquivos ser√£o salvos apenas localmente.")
        
        # Processar uploads
        ementas_data = []
        for i, uploaded_file in enumerate(uploaded_files):
            try:
                # Salvar arquivo temporariamente
                file_path = f"src/data/uploads/{uploaded_file.name}"
                os.makedirs("src/data/uploads", exist_ok=True)
                
                with open(file_path, "wb") as f:
                    f.write(uploaded_file.getbuffer())
                
                # Upload para Google Drive se dispon√≠vel
                drive_id = None
                if drive_available and not st.session_state.get('skip_drive', False):
                    try:
                        with st.spinner(f"üì§ Enviando {uploaded_file.name} para o Google Drive..."):
                            drive_id = drive_service.upload_file(
                                file_path, 
                                uploaded_file.name, 
                                'application/pdf'
                            )
                        
                        if drive_id:
                            st.success(f"‚úÖ {uploaded_file.name} enviado para o Google Drive!")
                        else:
                            st.warning(f"‚ö†Ô∏è Falha ao enviar {uploaded_file.name} para o Google Drive")
                    except Exception as e:
                        error_msg = str(e)
                        if "invalid_grant" in error_msg or "Token has been expired" in error_msg:
                            st.error(f"üîë Token do Google Drive expirado para {uploaded_file.name}")
                            handle_drive_token_error()
                            return []  # Parar processamento
                        else:
                            st.warning(f"‚ö†Ô∏è Erro ao enviar {uploaded_file.name} para o Google Drive: {error_msg}")
                            st.info("üí° Continuando com processamento local...")
                else:
                    drive_id = f"local_{i}_{datetime.now().timestamp()}"
                
                # Criar registro da ementa (sem id_ementa - ser√° gerado pelo Supabase)
                ementa_data = {
                    'drive_id': drive_id,
                    'data_upload': datetime.now()
                }
                
                # Usar apenas os campos necess√°rios para cria√ß√£o
                ementa_dict = convert_datetime_for_json(ementa_data)
                ementa_dict['professor_id'] = professor_prontuario
                ementa_result = database.create_ementa(ementa_dict)
                
                if ementa_result and 'id_ementa' in ementa_result:
                    ementa_id = ementa_result['id_ementa']
                    ementas_data.append({
                        'id_ementa': ementa_id,
                        'nome_arquivo': uploaded_file.name,
                        'caminho': file_path,
                        'drive_id': drive_id
                    })
                else:
                    st.error(f"‚ùå Erro ao criar registro da ementa para {uploaded_file.name}")
                    continue
                
            except Exception as e:
                st.error(f"Erro ao processar {uploaded_file.name}: {str(e)}")
        
        return ementas_data
    
    return []

# Fun√ß√£o para an√°lise real com IA
def process_analysis_with_ai(ementa_id: int, course_code: str, professor_prontuario: str) -> List[Dict]:
    """Processa an√°lise real usando IA"""
    
    try:
        # Inicializar cliente de IA
        ai_client = GroqClient()
    except ValueError as e:
        st.error(f"‚ùå Erro de configura√ß√£o da API: {str(e)}")
        st.info("üí° Para configurar a chave da API do Groq:")
        st.info("1. Acesse https://console.groq.com/keys")
        st.info("2. Crie uma conta e obtenha sua chave da API")
        st.info("3. Configure a vari√°vel de ambiente GROQ_API_KEY ou crie um arquivo .env")
        return []
    
    try:
        # Verificar se ementa_id √© v√°lido
        if not ementa_id or ementa_id is None:
            st.error("‚ùå ID da ementa inv√°lido! Verifique se o upload foi realizado corretamente.")
            return []
        
        # Buscar dados da ementa
        ementa_data = database.get_ementa_by_id(ementa_id)
        if not ementa_data:
            st.error(f"‚ùå Ementa {ementa_id} n√£o encontrada no banco de dados!")
            return []
        
        # Buscar dados do curso
        curso_data = database.get_curso_by_codigo(course_code)
        if not curso_data:
            st.error(f"Curso {course_code} n√£o encontrado!")
            return []
        
        # Se a ementa tem drive_id, baixar do Google Drive
        if ementa_data.get('drive_id') and not ementa_data['drive_id'].startswith('local_'):
            with st.spinner("üì• Baixando ementa do Google Drive..."):
                file_content = drive_service.download_file(
                    ementa_data['drive_id'], 
                    f"ementa_{ementa_id}.pdf"
                )
                if file_content:
                    # Salvar temporariamente
                    temp_path = f"src/data/uploads/temp_ementa_{ementa_id}.pdf"
                    os.makedirs("src/data/uploads", exist_ok=True)
                    with open(temp_path, "wb") as f:
                        f.write(file_content)
                    
                    # Extrair dados do PDF usando sistema h√≠brido (r√°pido + IA)
                    from helper import read_pdf_with_docling
                    pdf_data = read_pdf_with_docling(temp_path, ai_client)
                    texto_ementa = pdf_data.get("text", "")
                    structured_data = pdf_data.get("structured_data")
                    extraction_method = pdf_data.get("method", "unknown")
                    
                    # Exibir m√©todo de extra√ß√£o
                    if extraction_method == "pymupdf_ai_structured":
                        st.success("‚ö° Extra√ß√£o r√°pida + IA para estrutura√ß√£o")
                    elif extraction_method == "docling":
                        st.info("‚ú® Usando Docling para extra√ß√£o estruturada")
                    elif extraction_method == "pymupdf_fast":
                        st.info("‚ö° Extra√ß√£o r√°pida com PyMuPDF")
                    elif extraction_method == "pymupdf_fallback":
                        st.warning("‚ö†Ô∏è Fallback para PyMuPDF simples")
                    
                    # Limpar arquivo tempor√°rio
                    os.remove(temp_path)
                else:
                    st.error("Erro ao baixar ementa do Google Drive")
                    return []
        else:
            # Buscar arquivo local
            local_files = [f for f in os.listdir("src/data/uploads") if not f.startswith("temp_")]
            matching_files = [f for f in local_files if f.endswith(".pdf")]
            
            if matching_files:
                file_path = f"src/data/uploads/{matching_files[-1]}"  # Usar o √∫ltimo arquivo
                
                # Extrair dados do PDF usando sistema h√≠brido (r√°pido + IA)
                from helper import read_pdf_with_docling
                pdf_data = read_pdf_with_docling(file_path, ai_client)
                texto_ementa = pdf_data.get("text", "")
                structured_data = pdf_data.get("structured_data")
                extraction_method = pdf_data.get("method", "unknown")
                
                # Exibir m√©todo de extra√ß√£o
                if extraction_method == "pymupdf_ai_structured":
                    st.success("‚ö° Extra√ß√£o r√°pida + IA para estrutura√ß√£o")
                elif extraction_method == "docling":
                    st.info("‚ú® Usando Docling para extra√ß√£o estruturada")
                elif extraction_method == "pymupdf_fast":
                    st.info("‚ö° Extra√ß√£o r√°pida com PyMuPDF")
                elif extraction_method == "pymupdf_fallback":
                    st.warning("‚ö†Ô∏è Fallback para PyMuPDF simples")
            else:
                st.error("Arquivo da ementa n√£o encontrado!")
                return []
        
        if not texto_ementa.strip():
            st.error("N√£o foi poss√≠vel extrair texto da ementa!")
            return []
        
        # Gerar resumo da ementa
        with st.spinner("ü§ñ Gerando resumo da ementa..."):
            resumo_ementa = ai_client.resume_ementa(texto_ementa)
        
        # Gerar score da an√°lise
        with st.spinner("üìä Calculando score da an√°lise..."):
            score = ai_client.generate_score(resumo_ementa, curso_data)
            if score is None:
                score = 5.0  # Score padr√£o
            
            # Garantir que score √© um n√∫mero v√°lido
            try:
                score = float(score)
                if score < 0 or score > 10:
                    score = 5.0  # Score padr√£o se fora do range
            except (ValueError, TypeError):
                score = 5.0  # Score padr√£o se n√£o conseguir converter
        
        # Gerar an√°lise detalhada
        with st.spinner("üìù Gerando an√°lise detalhada..."):
            texto_analise = ai_client.generate_opinion(resumo_ementa, curso_data)
        
        # Extrair nome do aluno do resumo ou dos dados estruturados
        import re
        nome_aluno = "Nome n√£o identificado"
        
        # Tentar extrair do Docling primeiro
        if 'structured_data' in locals() and structured_data:
            student_info = structured_data.get("student_info", {})
            if student_info.get("nome"):
                nome_aluno = student_info["nome"]
        
        # Fallback para regex no resumo
        if nome_aluno == "Nome n√£o identificado":
            nome_match = re.search(r"## Nome Completo\s*(.*)", resumo_ementa)
            nome_aluno = nome_match.group(1).strip() if nome_match else "Nome n√£o identificado"
        
        # Criar dados da an√°lise com JSON estruturado do Docling
        analise_data = {
            'ementa_fk': ementa_id,
            'nome_aluno': nome_aluno,
            'adequado': score >= 7.0,
            'score': int(score * 10),  # Converter para escala 0-100
            'texto_analise': texto_analise,
            'materias_restantes': "Ver an√°lise detalhada" if score < 7.0 else "Nenhuma"
        }
        
        # Adicionar dados estruturados se dispon√≠vel
        if 'structured_data' in locals() and structured_data:
            analise_data['dados_estruturados_json'] = json.dumps(structured_data, ensure_ascii=False)
        
        # Salvar an√°lise no banco
        try:
            # Criar objeto Analise
            analise = Analise(**analise_data)
            analise_dict = convert_datetime_for_json(analise.model_dump())
            analise_dict['professor_id'] = professor_prontuario
            
            # Debug removido para produ√ß√£o
            
            # Salvar no banco com relacionamento ao curso
            analise_result = database.create_analise(analise_dict, curso_codigo=course_code)
            
            if analise_result:
                analise_id = analise_result.get('analise_id')
                analise_data['analise_id'] = analise_id
                st.success(f"‚úÖ An√°lise salva com ID: {analise_id} e vinculada ao curso {course_code}")
            else:
                st.error("‚ùå Falha ao salvar an√°lise no banco de dados")
                analise_data['analise_id'] = None
                
        except Exception as e:
            st.error(f"‚ùå Erro ao salvar an√°lise: {str(e)}")
            import traceback
            st.error(f"Detalhes do erro: {traceback.format_exc()}")
            analise_data['analise_id'] = None
        
        return [analise_data]
    
    except Exception as e:
        st.error(f"‚ùå Erro ao processar an√°lise: {str(e)}")
        return []

# ==================== INTERFACE PRINCIPAL ====================

# Cabe√ßalho principal
st.markdown("""
<div class="main-header">
    <h1>üéì Nexus Education</h1>
    <p>Sistema de An√°lise de Ementas Acad√™micas</p>
</div>
""", unsafe_allow_html=True)

# Verificar se usu√°rio est√° logado
if not is_logged_in():
    # ==================== P√ÅGINA DE LOGIN ====================
    
    st.markdown("### üîê Acesso ao Sistema")
    
    # Tabs para Login e Cadastro
    # Se show_login_tab estiver definido, mostrar login primeiro
    if st.session_state.get('show_login_tab', False):
        tab1, tab2 = st.tabs(["Login", "Cadastro"])
        # Limpar o flag ap√≥s usar
        del st.session_state['show_login_tab']
    else:
        tab1, tab2 = st.tabs(["Login", "Cadastro"])
    
    with tab1:
        st.markdown("""
        <div class="login-container">
            <h3 style="text-align: center;">Login</h3>
        </div>
        """, unsafe_allow_html=True)
        
        # Mostrar mensagem se foi redirecionado do cadastro
        if st.session_state.get('show_login_tab', False):
            st.success("üéâ Cadastro realizado com sucesso! Agora fa√ßa login com suas credenciais.")
        
        with st.form("login_form"):
            login_field = st.text_input("Email ou Prontu√°rio", placeholder="seu.email@universidade.edu ou SP1234567")
            senha = st.text_input("Senha", type="password")
            
            col1, col2 = st.columns([1, 1])
            with col1:
                login_submitted = st.form_submit_button("Entrar", use_container_width=True)
            with col2:
                google_login = st.form_submit_button("Login com Google", use_container_width=True)
        
        if login_submitted:
            if login_field and senha:
                # Detectar automaticamente se √© email ou prontu√°rio e autenticar
                professor = authenticate_professor_unified(login_field, senha)
                if professor:
                    st.session_state.user_logged_in = True
                    st.session_state.user_data = professor
                    st.success("Login realizado com sucesso!")
                    st.rerun()
                else:
                    # Verificar se o formato est√° correto
                    if is_valid_email(login_field):
                        st.error("Email ou senha incorretos!")
                    elif len(login_field) == 9:
                        st.error("Prontu√°rio ou senha incorretos!")
                    else:
                        st.error("Digite um email v√°lido ou um prontu√°rio de 9 d√≠gitos!")
            else:
                st.error("Preencha todos os campos!")
        
        if google_login:
            st.info("üöß Login com Google ser√° implementado em breve!")
    
    with tab2:
        st.markdown("""
        <div class="login-container">
            <h3 style="text-align: center;">Cadastrar</h3>
        </div>
        """, unsafe_allow_html=True)
        
        with st.form("register_form"):
            st.markdown("#### Dados Pessoais")
            nome = st.text_input("Nome Completo", placeholder="Seu nome completo")
            prontuario = st.text_input("Prontu√°rio", placeholder="SP3456789", max_chars=9)
            email = st.text_input("Email Educacional", placeholder="seu.email@universidade.edu")
            senha = st.text_input("Senha", type="password")
            confirmar_senha = st.text_input("Confirmar Senha", type="password")
            
            st.markdown("#### Cursos que Leciona")
            st.markdown("Adicione os cursos que voc√™ leciona:")
            
            # Interface para adicionar cursos
            if 'cursos_temp' not in st.session_state:
                st.session_state.cursos_temp = []
            
            # Formul√°rio para adicionar curso
            with st.container():
                st.markdown("**‚ûï Adicionar Novo Curso**")
                col1, col2, col3 = st.columns([2, 2, 1])
            with col1:
                codigo_curso = st.text_input("C√≥digo do Curso", placeholder="Ex: ENG001", key="new_course_code")
            with col2:
                nome_curso = st.text_input("Nome do Curso", placeholder="Ex: Engenharia de Software", key="new_course_name")
            with col3:
                if st.form_submit_button("‚ûï Adicionar", key="add_course"):
                    if codigo_curso and nome_curso:
                        # Verificar se c√≥digo j√° existe
                        codigo_existe = any(curso['codigo_curso'] == codigo_curso for curso in st.session_state.cursos_temp)
                        if codigo_existe:
                            st.error("C√≥digo do curso j√° existe!")
                        else:
                            curso_data = {
                                'codigo_curso': codigo_curso.upper(),
                                'nome': nome_curso,
                                'descricao_curso': f"Curso de {nome_curso}",
                                'disciplinas': []
                            }
                            st.session_state.cursos_temp.append(curso_data)
                            st.success(f"‚úÖ Curso {nome_curso} adicionado!")
                            st.rerun()
                    else:
                        st.error("Preencha todos os campos!")
            
            # Exibir cursos adicionados com melhor interface
            if st.session_state.cursos_temp:
                st.markdown("---")
                st.markdown("### üìö Cursos Adicionados")
                
                for i, curso in enumerate(st.session_state.cursos_temp):
                    with st.container():
                        st.markdown(f"""
                        <div class="course-card">
                            <h4>üéì {curso['codigo_curso']} - {curso['nome']}</h4>
                            <p><strong>Disciplinas:</strong> {len(curso['disciplinas'])} cadastradas</p>
                        </div>
                        """, unsafe_allow_html=True)
                        
                        # Bot√µes de a√ß√£o do curso
                        col1, col2, col3 = st.columns([1, 1, 1])
                        with col1:
                            if st.form_submit_button("üóëÔ∏è Remover Curso", key=f"remove_course_{i}"):
                                st.session_state.cursos_temp.pop(i)
                                st.success("Curso removido!")
                                st.rerun()
                        with col2:
                            if st.form_submit_button("üìù Gerenciar Disciplinas", key=f"manage_disc_{i}"):
                                if f"show_disc_{i}" not in st.session_state:
                                    st.session_state[f"show_disc_{i}"] = True
                                else:
                                    st.session_state[f"show_disc_{i}"] = not st.session_state[f"show_disc_{i}"]
                                st.rerun()
                        with col3:
                            if st.form_submit_button("üìä Ver Disciplinas", key=f"view_disc_{i}"):
                                st.session_state[f"show_disc_{i}"] = True
                                st.rerun()
            
                # Se√ß√£o de gerenciamento de disciplinas
                for i, curso in enumerate(st.session_state.cursos_temp):
                    if st.session_state.get(f"show_disc_{i}", False):
                        st.markdown(f"---")
                        st.markdown(f"### üìñ Disciplinas - {curso['nome']} ({curso['codigo_curso']})")
                        
                        # Listar disciplinas existentes
                        if curso['disciplinas']:
                            st.markdown("**Disciplinas Cadastradas:**")
                            for j, disciplina in enumerate(curso['disciplinas']):
                                st.markdown(f"""
                                <div class="discipline-item">
                                    <div style="display: flex; justify-content: space-between; align-items: center;">
                                        <div>
                                            <strong>üìö {disciplina['id_disciplina']} - {disciplina['nome']}</strong><br>
                                            <small>‚è∞ {disciplina['carga_horaria']} horas</small>
                                        </div>
                                        <div>
                                            <button onclick="editDiscipline({i}, {j})" style="margin-right: 5px;">‚úèÔ∏è</button>
                                            <button onclick="deleteDiscipline({i}, {j})">üóëÔ∏è</button>
                                        </div>
                                    </div>
                                </div>
                                """, unsafe_allow_html=True)
                                
                                # Bot√µes de a√ß√£o (mantidos para funcionalidade)
                                col1, col2 = st.columns([1, 1])
                                with col1:
                                    if st.form_submit_button("‚úèÔ∏è Editar", key=f"edit_disc_{i}_{j}"):
                                        st.session_state[f"editing_disc_{i}_{j}"] = True
                                        st.rerun()
                                with col2:
                                    if st.form_submit_button("üóëÔ∏è Remover", key=f"delete_disc_{i}_{j}"):
                                        curso['disciplinas'].pop(j)
                                        st.success(f"Disciplina {disciplina['nome']} removida!")
                                        st.rerun()
                        else:
                            st.info("Nenhuma disciplina cadastrada para este curso.")
                        
                        # Formul√°rio para adicionar disciplina
                        st.markdown("**‚ûï Adicionar Nova Disciplina**")
                        col1, col2, col3, col4 = st.columns([2, 2, 1, 1])
                        with col1:
                            id_disciplina = st.text_input(f"ID Disciplina", key=f"disc_id_{i}", placeholder="Ex: DISC001")
                        with col2:
                            nome_disciplina = st.text_input(f"Nome Disciplina", key=f"disc_nome_{i}", placeholder="Ex: Programa√ß√£o I")
                        with col3:
                            carga_horaria = st.number_input(f"Carga Hor√°ria", min_value=1, max_value=200, key=f"disc_carga_{i}", value=60)
                        with col4:
                            if st.form_submit_button("‚ûï Adicionar", key=f"add_disc_{i}"):
                                if id_disciplina and nome_disciplina and carga_horaria:
                                    # Verificar se ID j√° existe neste curso
                                    id_existe = any(disc['id_disciplina'] == id_disciplina for disc in curso['disciplinas'])
                                    if id_existe:
                                        st.error("ID da disciplina j√° existe neste curso!")
                                    else:
                                        disciplina_data = {
                                            'id_disciplina': id_disciplina.upper(),
                                            'nome': nome_disciplina,
                                            'carga_horaria': carga_horaria
                                        }
                                        curso['disciplinas'].append(disciplina_data)
                                        st.success(f"‚úÖ Disciplina {nome_disciplina} adicionada!")
                                        st.rerun()
                                else:
                                    st.error("Preencha todos os campos!")
                        
                        # Bot√£o para fechar se√ß√£o
                        if st.form_submit_button("‚ùå Fechar Gerenciamento", key=f"close_disc_{i}"):
                            st.session_state[f"show_disc_{i}"] = False
                            st.rerun()
            else:
                st.info("üëÜ Adicione pelo menos um curso para continuar.")
            
            # Resumo dos cursos e disciplinas
            if st.session_state.cursos_temp:
                st.markdown("---")
                st.markdown("### üìä Resumo do Cadastro")
                
                total_cursos = len(st.session_state.cursos_temp)
                total_disciplinas = sum(len(curso['disciplinas']) for curso in st.session_state.cursos_temp)
                total_horas = sum(sum(disc['carga_horaria'] for disc in curso['disciplinas']) for curso in st.session_state.cursos_temp)
                
                col1, col2, col3, col4 = st.columns(4)
                with col1:
                    st.metric("üìö Cursos", total_cursos)
                with col2:
                    st.metric("üìñ Disciplinas", total_disciplinas)
                with col3:
                    st.metric("‚è∞ Total de Horas", f"{total_horas}h")
                with col4:
                    st.metric("üìà M√©dia/Curso", f"{total_disciplinas/total_cursos:.1f}" if total_cursos > 0 else "0")
                
                # Lista resumida
                st.markdown("**Lista de Cursos e Disciplinas:**")
                for i, curso in enumerate(st.session_state.cursos_temp):
                    with st.expander(f"üéì {curso['codigo_curso']} - {curso['nome']} ({len(curso['disciplinas'])} disciplinas)"):
                        if curso['disciplinas']:
                            for disciplina in curso['disciplinas']:
                                st.write(f"  üìö {disciplina['id_disciplina']} - {disciplina['nome']} ({disciplina['carga_horaria']}h)")
                        else:
                            st.write("  ‚ÑπÔ∏è Nenhuma disciplina cadastrada")
            
            # Bot√£o de cadastro
            if st.form_submit_button("Cadastrar", use_container_width=True):
                if nome and prontuario and email and senha and confirmar_senha:
                    if senha != confirmar_senha:
                        st.error("Senhas n√£o coincidem!")
                    elif not is_valid_email(email):
                        st.error("Email inv√°lido!")
                    elif len(prontuario) != 9:
                        st.error("Prontu√°rio deve ter 9 d√≠gitos!")
                    elif not st.session_state.cursos_temp:
                        st.error("Adicione pelo menos um curso!")
                    else:
                        professor_data = {
                            'prontuario': prontuario,
                            'nome': nome,
                            'email_educacional': email,
                            'senha': senha,
                            'cursos': st.session_state.cursos_temp
                        }
                        
                        if register_professor(professor_data):
                            st.success("üéâ Cadastro realizado com sucesso!")
                            st.info("üîÑ Fazendo login automaticamente...")
                            st.session_state.cursos_temp = []
                            
                            # Fazer login autom√°tico ap√≥s cadastro
                            professor = authenticate_professor(email, senha)
                            if professor:
                                st.session_state.user_logged_in = True
                                st.session_state.user_data = professor
                                st.success("‚úÖ Login autom√°tico realizado! Bem-vindo ao sistema!")
                                st.rerun()
                            else:
                                st.error("‚ùå Erro no login autom√°tico. Fa√ßa login manualmente.")
                                st.session_state['show_login_tab'] = True
                                st.rerun()

else:
    # ==================== P√ÅGINA PRINCIPAL (HOME) ====================
    
    # Barra lateral com informa√ß√µes do usu√°rio
    with st.sidebar:
        st.markdown(f"### üëã Ol√°, {st.session_state.user_data['nome']}!")
        st.markdown(f"**Prontu√°rio:** {st.session_state.user_data['prontuario']}")
        st.markdown(f"**Email:** {st.session_state.user_data['email_educacional']}")
        
        st.markdown("---")
        
        # Bot√£o de Gerenciamento de Cursos
        if st.button("‚öôÔ∏è Gerenciar Cursos e Disciplinas", use_container_width=True, type="primary"):
            st.session_state.show_gerenciar_cursos = True
        
        st.markdown("---")
        
        if st.button("üö™ Logout", use_container_width=True):
            logout()
            st.rerun()
    
    # Modal de Gerenciamento de Cursos
    if st.session_state.get('show_gerenciar_cursos', False):
        st.markdown("## ‚öôÔ∏è Gerenciar Cursos e Disciplinas")
        
        # Buscar cursos do professor
        professor_cursos = database.get_professor_courses(st.session_state.user_data['prontuario'])
        
        if professor_cursos:
            for curso in professor_cursos:
                with st.expander(f"üéì {curso['codigo_curso']} - {curso['nome']}", expanded=False):
                    st.markdown(f"**C√≥digo:** {curso['codigo_curso']}")
                    st.markdown(f"**Nome:** {curso['nome']}")
                    
                    # Buscar disciplinas do curso
                    disciplinas = database.get_course_disciplines(curso['codigo_curso'])
                    
                    st.markdown("---")
                    st.markdown("### üìö Disciplinas")
                    
                    if disciplinas:
                        for disc in disciplinas:
                            col1, col2, col3 = st.columns([3, 1, 1])
                            with col1:
                                st.markdown(f"**{disc['id_disciplina']}** - {disc['nome']}")
                            with col2:
                                st.markdown(f"‚è∞ {disc['carga_horaria']}h")
                            with col3:
                                if st.button("üóëÔ∏è", key=f"del_disc_{disc['id_disciplina']}", help="Remover disciplina"):
                                    if database.delete_disciplina(disc['id_disciplina']):
                                        st.success("Disciplina removida!")
                                        st.rerun()
                    else:
                        st.info("Nenhuma disciplina cadastrada para este curso.")
                    
                    # Adicionar nova disciplina
                    st.markdown("---")
                    st.markdown("**‚ûï Adicionar Nova Disciplina**")
                    
                    with st.form(key=f"add_disc_form_{curso['codigo_curso']}"):
                        col1, col2, col3 = st.columns([2, 2, 1])
                        with col1:
                            new_disc_id = st.text_input("ID Disciplina", placeholder="Ex: DISC001")
                        with col2:
                            new_disc_nome = st.text_input("Nome", placeholder="Ex: Programa√ß√£o I")
                        with col3:
                            new_disc_carga = st.number_input("Horas", min_value=1, max_value=200, value=60)
                        
                        if st.form_submit_button("‚ûï Adicionar Disciplina"):
                            if new_disc_id and new_disc_nome:
                                # Criar disciplina
                                disciplina_obj = Disciplinas(
                                    id_disciplina=new_disc_id.upper(),
                                    nome=new_disc_nome,
                                    carga_horaria=new_disc_carga
                                )
                                
                                if database.create_disciplina(disciplina_obj.model_dump()):
                                    # Vincular ao curso
                                    database.add_disciplina_to_curso(curso['codigo_curso'], new_disc_id.upper())
                                    st.success(f"‚úÖ Disciplina {new_disc_nome} adicionada!")
                                    st.rerun()
                                else:
                                    st.error("Erro ao criar disciplina. Verifique se o ID j√° existe.")
                            else:
                                st.error("Preencha ID e Nome da disciplina!")
        else:
            st.info("Voc√™ ainda n√£o possui cursos cadastrados.")
        
        st.markdown("---")
        if st.button("‚ùå Fechar Gerenciamento", use_container_width=True):
            st.session_state.show_gerenciar_cursos = False
            st.rerun()
        
        st.markdown("---")
    
    # T√≠tulo principal
    st.markdown("### üè† P√°gina Principal")
    st.markdown("**Comece a analisar requerimentos de alunos**")
    
    # Sele√ß√£o de curso
    st.markdown("#### üìö Selecione um Curso")
    professor_courses = database.get_professor_courses(st.session_state.user_data['prontuario'])
    
    if not professor_courses:
        st.warning("Voc√™ n√£o possui cursos cadastrados. Entre em contato com o administrador.")
    else:
        course_options = [f"{curso['codigo_curso']} - {curso['nome']}" for curso in professor_courses]
        
        # Determinar o √≠ndice inicial baseado no curso selecionado anteriormente
        initial_index = None
        if 'selected_course' in st.session_state and st.session_state.selected_course:
            try:
                initial_index = next(i for i, option in enumerate(course_options) 
                                   if option.startswith(st.session_state.selected_course + " - "))
            except StopIteration:
                initial_index = None
                # Se n√£o encontrar o curso anterior, limpar o estado
                if 'selected_course' in st.session_state:
                    del st.session_state.selected_course
        
        selected_course = st.selectbox(
            "Escolha o curso para an√°lise:",
            course_options,
            index=initial_index
        )
        
        if selected_course:
            # Extrair c√≥digo do curso selecionado
            course_code = selected_course.split(" - ")[0]
            
            # Verificar se o curso mudou e limpar dados do curso anterior
            if 'selected_course' in st.session_state and st.session_state.selected_course != course_code:
                # Limpar an√°lises do curso anterior quando trocar de curso
                if 'analyses_data' in st.session_state:
                    del st.session_state.analyses_data
            
            # Atualizar o curso selecionado
            st.session_state.selected_course = course_code
            
            # Mostrar informa√ß√µes do curso selecionado
            curso_info = database.get_curso_by_codigo(course_code)
            if curso_info:
                st.markdown(f"### üìö {curso_info['nome']}")
                st.markdown(f"**C√≥digo:** {curso_info['codigo_curso']}")
                st.markdown(f"**Descri√ß√£o:** {curso_info['descricao_curso']}")
            else:
                st.error(f"‚ùå Erro: N√£o foi poss√≠vel carregar informa√ß√µes do curso {course_code}")
                st.info("Tente selecionar o curso novamente.")
                
                # Debug tempor√°rio - remover em produ√ß√£o
                with st.expander("üîç Debug - Informa√ß√µes do Curso"):
                    st.write(f"Course Code: {course_code}")
                    st.write(f"Professor Courses: {[c['codigo_curso'] for c in professor_courses]}")
                    st.write(f"Database Type: {type(database).__name__}")
                    st.write(f"Use Supabase: {getattr(database, 'use_supabase', 'N/A')}")
            
            # Se√ß√£o: Disciplinas do Curso
            st.markdown("#### üìñ Disciplinas do Curso")
            disciplinas_curso = database.get_curso_disciplines(course_code)
            
            if disciplinas_curso:
                # Criar DataFrame com as disciplinas
                df_disciplinas = pd.DataFrame(disciplinas_curso)
                
                # Renomear colunas para melhor exibi√ß√£o
                df_disciplinas_display = df_disciplinas[['id_disciplina', 'nome', 'carga_horaria']].copy()
                df_disciplinas_display.columns = ['C√≥digo', 'Nome da Disciplina', 'Carga Hor√°ria (h)']
                
                # Preencher valores nulos
                df_disciplinas_display['Carga Hor√°ria (h)'] = df_disciplinas_display['Carga Hor√°ria (h)'].fillna('N√£o informado')
                
                # Configurar tabela
                gb_disciplinas = GridOptionsBuilder.from_dataframe(df_disciplinas_display)
                gb_disciplinas.configure_pagination(paginationAutoPageSize=True)
                gb_disciplinas.configure_column("C√≥digo", header_name="C√≥digo", width=120)
                gb_disciplinas.configure_column("Nome da Disciplina", header_name="Nome da Disciplina", flex=1)
                gb_disciplinas.configure_column("Carga Hor√°ria (h)", header_name="Carga Hor√°ria", width=150)
                gb_disciplinas.configure_default_column(enablePivot=True, enableValue=True, enableRowGroup=True)
                
                grid_options_disciplinas = gb_disciplinas.build()
                
                # Exibir tabela de disciplinas
                AgGrid(
                    df_disciplinas_display,
                    grid_options=grid_options_disciplinas,
                    enable_enterprise_modules=True,
                    update_mode=GridUpdateMode.SELECTION_CHANGED,
                    theme='streamlit',
                    height=300
                )
                
                # Mostrar estat√≠sticas das disciplinas
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("Total de Disciplinas", len(disciplinas_curso))
                with col2:
                    carga_total = sum(d.get('carga_horaria', 0) for d in disciplinas_curso if d.get('carga_horaria'))
                    st.metric("Carga Hor√°ria Total", f"{carga_total}h" if carga_total > 0 else "N√£o informado")
                with col3:
                    carga_media = carga_total / len(disciplinas_curso) if len(disciplinas_curso) > 0 and carga_total > 0 else 0
                    st.metric("Carga Hor√°ria M√©dia", f"{carga_media:.1f}h" if carga_media > 0 else "N√£o informado")
                
            else:
                st.info("üìù Nenhuma disciplina cadastrada para este curso.")
                st.markdown("""
                <div style="background-color: #f0f2f6; padding: 15px; border-radius: 10px; margin: 10px 0;">
                    <p><strong>üí° Dica:</strong> Para cadastrar disciplinas para este curso, acesse a se√ß√£o de administra√ß√£o.</p>
                </div>
                """, unsafe_allow_html=True)
            
            st.markdown("---")
            
            # Se√ß√£o: Dashboard e Hist√≥rico completo do curso
            st.markdown("### üìä Dashboard de An√°lises")
            st.markdown(f"**Curso:** {curso_info['nome']} ({course_code})")
            
            # Buscar todas as an√°lises do curso selecionado feitas pelo professor logado (hist√≥rico)
            historico_analyses = database.get_analises_by_curso_and_professor_usando_relacionamento(course_code, st.session_state.user_data['prontuario'])
            
            if historico_analyses:
                # Criar DataFrame com hist√≥rico
                df_historico = pd.DataFrame(historico_analyses)
                
                # ==================== DASHBOARD COM GR√ÅFICOS ====================
                st.markdown("#### üìà Vis√£o Geral do Curso")
                
                # KPIs Principais
                col1, col2, col3, col4, col5 = st.columns(5)
                
                with col1:
                    st.metric("üìä Total de An√°lises", len(historico_analyses))
                
                with col2:
                    adequados_historico = len(df_historico[df_historico['adequado'] == True])
                    taxa_adequacao = (adequados_historico / len(historico_analyses) * 100) if len(historico_analyses) > 0 else 0
                    st.metric("‚úÖ Adequados", f"{adequados_historico} ({taxa_adequacao:.0f}%)")
                
                with col3:
                    nao_adequados = len(historico_analyses) - adequados_historico
                    st.metric("‚ùå N√£o Adequados", nao_adequados)
                
                with col4:
                    score_medio_historico = df_historico['score'].mean()
                    st.metric("üìä Score M√©dio", f"{score_medio_historico:.1f}/100")
                
                with col5:
                    score_max_historico = df_historico['score'].max()
                    st.metric("üèÜ Score M√°ximo", f"{score_max_historico}/100")
                
                st.markdown("---")
                
                # Linha 1: Gr√°ficos de Status e Distribui√ß√£o de Scores
                st.markdown("#### üìä An√°lises Estat√≠sticas")
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    # Gr√°fico de Pizza - Status dos Alunos
                    st.markdown("##### üéØ Status dos Alunos")
                    fig_pie = px.pie(
                        values=[adequados_historico, nao_adequados],
                        names=['Adequados', 'N√£o Adequados'],
                        color_discrete_sequence=['#28a745', '#dc3545'],
                        hole=0.4
                    )
                    fig_pie.update_traces(textposition='inside', textinfo='percent+label')
                    fig_pie.update_layout(
                        showlegend=True,
                        height=300,
                        margin=dict(t=30, b=0, l=0, r=0)
                    )
                    st.plotly_chart(fig_pie, use_container_width=True)
                
                with col2:
                    # Histograma de Distribui√ß√£o de Scores
                    st.markdown("##### üìä Distribui√ß√£o de Scores")
                    fig_hist = px.histogram(
                        df_historico,
                        x='score',
                        nbins=10,
                        color_discrete_sequence=['#007bff']
                    )
                    fig_hist.update_layout(
                        xaxis_title="Score",
                        yaxis_title="Quantidade",
                        showlegend=False,
                        height=300,
                        margin=dict(t=30, b=40, l=40, r=0)
                    )
                    st.plotly_chart(fig_hist, use_container_width=True)
                
                with col3:
                    # Box Plot de Scores
                    st.markdown("##### üì¶ An√°lise de Scores")
                    fig_box = px.box(
                        df_historico,
                        y='score',
                        color_discrete_sequence=['#17a2b8']
                    )
                    fig_box.update_layout(
                        yaxis_title="Score",
                        showlegend=False,
                        height=300,
                        margin=dict(t=30, b=40, l=40, r=0)
                    )
                    st.plotly_chart(fig_box, use_container_width=True)
                
                st.markdown("---")
                
                # Linha 2: Gr√°ficos Temporais e Top Alunos
                col1, col2 = st.columns(2)
                
                with col1:
                    # Linha Temporal de Scores (se houver data)
                    st.markdown("##### üìÖ Evolu√ß√£o Temporal")
                    if 'created_at' in df_historico.columns:
                        # Converter created_at para datetime
                        df_historico['data'] = pd.to_datetime(df_historico['created_at'])
                        df_sorted = df_historico.sort_values('data')
                        
                        fig_line = px.line(
                            df_sorted,
                            x='data',
                            y='score',
                            markers=True,
                            color_discrete_sequence=['#6f42c1']
                        )
                        fig_line.add_hline(
                            y=70,
                            line_dash="dash",
                            line_color="green",
                            annotation_text="Linha de Corte (70)"
                        )
                        fig_line.update_layout(
                            xaxis_title="Data",
                            yaxis_title="Score",
                            showlegend=False,
                            height=350,
                            margin=dict(t=30, b=40, l=40, r=0)
                        )
                        st.plotly_chart(fig_line, use_container_width=True)
                    else:
                        # Gr√°fico de Barras de Scores por Aluno
                        top_10 = df_historico.nlargest(10, 'score')
                        fig_bar = px.bar(
                            top_10,
                            x='nome_aluno',
                            y='score',
                            color='score',
                            color_continuous_scale='RdYlGn'
                        )
                        fig_bar.update_layout(
                            xaxis_title="Aluno",
                            yaxis_title="Score",
                            showlegend=False,
                            height=350,
                            margin=dict(t=30, b=40, l=40, r=0)
                        )
                        fig_bar.update_xaxes(tickangle=45)
                        st.plotly_chart(fig_bar, use_container_width=True)
                
                with col2:
                    # Tabela de Top 10 Melhores Alunos
                    st.markdown("##### üèÜ Top 10 Melhores Scores")
                    top_alunos = df_historico.nlargest(10, 'score')[['nome_aluno', 'score', 'adequado']].copy()
                    top_alunos['Posi√ß√£o'] = range(1, len(top_alunos) + 1)
                    top_alunos['Status'] = top_alunos['adequado'].apply(lambda x: '‚úÖ' if x else '‚ùå')
                    top_alunos = top_alunos[['Posi√ß√£o', 'nome_aluno', 'score', 'Status']]
                    top_alunos.columns = ['#', 'Aluno', 'Score', 'Status']
                    
                    # Colorir scores
                    def highlight_score(row):
                        if row['Score'] >= 80:
                            return ['background-color: #d4edda'] * len(row)
                        elif row['Score'] >= 70:
                            return ['background-color: #fff3cd'] * len(row)
                        else:
                            return ['background-color: #f8d7da'] * len(row)
                    
                    styled_top = top_alunos.style.apply(highlight_score, axis=1)
                    st.dataframe(styled_top, use_container_width=True, height=350)
                
                st.markdown("---")
                
                # Estat√≠sticas Detalhadas
                st.markdown("#### üìà Estat√≠sticas Detalhadas")
                col1, col2, col3, col4 = st.columns(4)
                
                with col1:
                    st.metric("üìâ Score M√≠nimo", f"{df_historico['score'].min()}/100")
                    st.metric("üìä Mediana", f"{df_historico['score'].median():.1f}/100")
                
                with col2:
                    desvio_padrao = df_historico['score'].std()
                    st.metric("üìè Desvio Padr√£o", f"{desvio_padrao:.2f}")
                    q1 = df_historico['score'].quantile(0.25)
                    st.metric("üìä 1¬∫ Quartil", f"{q1:.1f}/100")
                
                with col3:
                    q3 = df_historico['score'].quantile(0.75)
                    st.metric("üìä 3¬∫ Quartil", f"{q3:.1f}/100")
                    scores_acima_70 = len(df_historico[df_historico['score'] >= 70])
                    st.metric("‚úÖ Scores ‚â• 70", f"{scores_acima_70} ({scores_acima_70/len(df_historico)*100:.0f}%)")
                
                with col4:
                    scores_abaixo_50 = len(df_historico[df_historico['score'] < 50])
                    st.metric("‚ö†Ô∏è Scores < 50", f"{scores_abaixo_50} ({scores_abaixo_50/len(df_historico)*100:.0f}%)")
                    amplitude = df_historico['score'].max() - df_historico['score'].min()
                    st.metric("üìè Amplitude", f"{amplitude}")
                
                st.markdown("---")
                
                # Hist√≥rico Completo em Tabela
                st.markdown("#### üìã Hist√≥rico Completo de An√°lises")
                
                # Tabela do hist√≥rico
                df_tabela_historico = df_historico[['analise_id', 'nome_aluno', 'score', 'adequado', 'materias_restantes']].copy()
                df_tabela_historico.columns = ['ID', 'Nome do Aluno', 'Score', 'Adequado', 'Mat√©rias Restantes']
                df_tabela_historico['Status'] = df_tabela_historico['Adequado'].apply(lambda x: '‚úÖ Adequado' if x else '‚ùå N√£o Adequado')
                df_tabela_historico = df_tabela_historico[['ID', 'Nome do Aluno', 'Score', 'Status', 'Mat√©rias Restantes']]
                
                # Configurar tabela do hist√≥rico
                gb_historico = GridOptionsBuilder.from_dataframe(df_tabela_historico)
                gb_historico.configure_pagination(paginationAutoPageSize=True)
                gb_historico.configure_column("Score", header_name="Score", sort="desc")
                gb_historico.configure_column("Status", header_name="Status")
                gb_historico.configure_selection(selection_mode="multiple", use_checkbox=True)
                gb_historico.configure_default_column(enablePivot=True, enableValue=True, enableRowGroup=True)
                
                grid_options_historico = gb_historico.build()
                
                # Exibir tabela do hist√≥rico
                response_historico = AgGrid(
                    df_tabela_historico,
                    grid_options=grid_options_historico,
                    enable_enterprise_modules=True,
                    update_mode=GridUpdateMode.SELECTION_CHANGED,
                    theme='streamlit',
                    height=400
                )
                
                # Se√ß√£o: Detalhes Autom√°ticos ao Selecionar
                selected_rows = response_historico.get('selected_rows', []) if response_historico else []
                
                if selected_rows and len(selected_rows) == 1:
                    # Mostrar detalhes automaticamente quando uma linha √© selecionada
                    row = selected_rows[0]
                    analise_completa = database.get_analise_by_id(row['ID'])
                    
                    if analise_completa:
                        st.markdown("---")
                        st.markdown(f"### üìã Detalhes da An√°lise - {row['Nome do Aluno']}")
                        
                        # Cards com informa√ß√µes principais
                        col1, col2, col3, col4 = st.columns(4)
                        with col1:
                            st.metric("üìä Score", f"{row['Score']}/100")
                        with col2:
                            st.metric("‚úÖ Status", "Adequado" if analise_completa['adequado'] else "N√£o Adequado")
                        with col3:
                            if 'created_at' in analise_completa:
                                from datetime import datetime
                                data = datetime.fromisoformat(analise_completa['created_at'].replace('Z', '+00:00'))
                                st.metric("üìÖ Data", data.strftime('%d/%m/%Y'))
                        with col4:
                            metodo = "IA" if analise_completa.get('dados_estruturados_json') else "Regex"
                            st.metric("üîß M√©todo", metodo)
                        
                        # An√°lise da IA
                        with st.expander("ü§ñ An√°lise Completa da IA", expanded=True):
                            st.markdown(analise_completa['texto_analise'])
                        
                        # Dados Estruturados Extra√≠dos
                        if analise_completa.get('dados_estruturados_json'):
                            try:
                                dados_estruturados = json.loads(analise_completa['dados_estruturados_json'])
                                
                                with st.expander("üìä Dados Estruturados Extra√≠dos", expanded=True):
                                    # Informa√ß√µes do Aluno
                                    st.markdown("#### üë§ Informa√ß√µes do Aluno")
                                    student_info = dados_estruturados.get('student_info', {})
                                    
                                    col_a, col_b = st.columns(2)
                                    with col_a:
                                        st.markdown(f"**Nome:** {student_info.get('nome', 'N/A')}")
                                        st.markdown(f"**RA:** {student_info.get('ra', 'N/A')}")
                                        st.markdown(f"**CPF:** {student_info.get('cpf', 'N/A')}")
                                    with col_b:
                                        st.markdown(f"**Curso:** {student_info.get('curso', 'N/A')}")
                                        st.markdown(f"**Data Matr√≠cula:** {student_info.get('data_matricula', 'N/A')}")
                                        st.markdown(f"**Per√≠odo Ingresso:** {student_info.get('periodo_ingresso', 'N/A')}")
                                    
                                    # Informa√ß√µes de Extra√ß√£o
                                    extraction_info = dados_estruturados.get('extraction_info', {})
                                    if extraction_info:
                                        st.markdown("#### üîß Informa√ß√µes da Extra√ß√£o")
                                        col_c, col_d, col_e = st.columns(3)
                                        with col_c:
                                            st.markdown(f"**M√©todo:** {extraction_info.get('method', 'N/A')}")
                                        with col_d:
                                            confianca = extraction_info.get('confidence', 0)
                                            st.markdown(f"**Confian√ßa:** {confianca:.2%}")
                                        with col_e:
                                            st.markdown(f"**Formato:** {extraction_info.get('detected_format', 'N/A')}")
                                    
                                    # Disciplinas (se existirem)
                                    disciplines = dados_estruturados.get('disciplines', [])
                                    if disciplines:
                                        st.markdown("#### üìö Disciplinas Extra√≠das")
                                        df_disciplines = pd.DataFrame(disciplines)
                                        st.dataframe(df_disciplines, use_container_width=True)
                                    
                                    # JSON Completo
                                    with st.expander("üîç Ver JSON Completo"):
                                        st.json(dados_estruturados)
                                        
                            except Exception as e:
                                st.warning(f"Erro ao processar dados estruturados: {e}")
                        else:
                            st.info("üí° Esta an√°lise foi processada antes da implementa√ß√£o do sistema de extra√ß√£o estruturada")
                
                # Se√ß√£o: A√ß√µes das An√°lises
                st.markdown("---")
                st.markdown("### üîç A√ß√µes das An√°lises")
                st.markdown("Digite o ID da an√°lise (vis√≠vel na coluna ID da tabela acima) para visualizar detalhes ou excluir.")
                
                col1, col2 = st.columns(2)
                
                with col1:
                    st.markdown("##### üìÑ Ver Detalhes da An√°lise")
                    analise_id_ver = st.number_input("ID da An√°lise:", min_value=1, step=1, key="id_ver_detalhes")
                    
                    if st.button("üîç Buscar Detalhes", use_container_width=True, key="buscar_detalhes_historico"):
                        analise = database.get_analise_by_id(analise_id_ver)
                        
                        if analise:
                            with st.expander(f"üìã {analise['nome_aluno']} - Score: {analise['score']}/100", expanded=True):
                                st.markdown("**ü§ñ An√°lise da IA:**")
                                st.markdown(analise['texto_analise'])
                                st.markdown("---")
                                
                                # Dados estruturados se existirem
                                if analise.get('dados_estruturados_json'):
                                    try:
                                        dados_estruturados = json.loads(analise['dados_estruturados_json'])
                                        st.markdown("**üìä Dados Estruturados:**")
                                        student_info = dados_estruturados.get('student_info', {})
                                        
                                        col_a, col_b = st.columns(2)
                                        with col_a:
                                            st.markdown(f"**Nome:** {student_info.get('nome', 'N/A')}")
                                            st.markdown(f"**RA:** {student_info.get('ra', 'N/A')}")
                                            st.markdown(f"**CPF:** {student_info.get('cpf', 'N/A')}")
                                        with col_b:
                                            st.markdown(f"**Curso:** {student_info.get('curso', 'N/A')}")
                                            st.markdown(f"**Data:** {student_info.get('data_matricula', 'N/A')}")
                                        
                                        with st.expander("üîç Ver JSON Completo"):
                                            st.json(dados_estruturados)
                                    except:
                                        pass
                                
                                # Informa√ß√µes adicionais
                                st.markdown("---")
                                st.markdown("**üìå Informa√ß√µes da An√°lise:**")
                                st.markdown(f"- **ID:** {analise['analise_id']}")
                                st.markdown(f"- **Status:** {'‚úÖ Adequado' if analise['adequado'] else '‚ùå N√£o Adequado'}")
                                st.markdown(f"- **Mat√©rias Restantes:** {analise.get('materias_restantes', 'N/A')}")
                                st.markdown(f"- **Data:** {analise.get('created_at', 'N/A')}")
                        else:
                            st.error(f"‚ùå An√°lise com ID {analise_id_ver} n√£o encontrada!")
                
                with col2:
                    st.markdown("##### üóëÔ∏è Excluir An√°lise")
                    
                    # Inicializar estado de confirma√ß√£o
                    if 'confirmar_exclusao_id' not in st.session_state:
                        st.session_state.confirmar_exclusao_id = None
                    
                    analise_id_excluir = st.number_input("ID da An√°lise:", min_value=1, step=1, key="id_excluir")
                    
                    # Se n√£o est√° em modo de confirma√ß√£o
                    if st.session_state.confirmar_exclusao_id is None:
                        if st.button("üóëÔ∏è Excluir An√°lise", use_container_width=True, key="excluir_analise_historico", type="primary"):
                            # Buscar an√°lise para confirmar
                            analise_confirmacao = database.get_analise_by_id(analise_id_excluir)
                            
                            if analise_confirmacao:
                                st.session_state.confirmar_exclusao_id = analise_id_excluir
                                st.session_state.confirmar_exclusao_nome = analise_confirmacao['nome_aluno']
                                st.rerun()
                            else:
                                st.error(f"‚ùå An√°lise com ID {analise_id_excluir} n√£o encontrada!")
                    
                    # Se est√° em modo de confirma√ß√£o
                    else:
                        st.warning(f"‚ö†Ô∏è Voc√™ est√° prestes a excluir a an√°lise de **{st.session_state.confirmar_exclusao_nome}**")
                        st.warning(f"**ID: {st.session_state.confirmar_exclusao_id}**")
                        
                        col_a, col_b = st.columns(2)
                        with col_a:
                            if st.button("‚úÖ Confirmar Exclus√£o", use_container_width=True, key="confirmar_exclusao_btn", type="primary"):
                                if database.delete_analise(st.session_state.confirmar_exclusao_id, st.session_state.user_data['prontuario']):
                                    st.success(f"‚úÖ An√°lise ID {st.session_state.confirmar_exclusao_id} exclu√≠da com sucesso!")
                                    st.session_state.confirmar_exclusao_id = None
                                    st.session_state.confirmar_exclusao_nome = None
                                    st.rerun()
                                else:
                                    st.error("‚ùå Erro ao excluir an√°lise. Voc√™ pode n√£o ter permiss√£o.")
                                    st.session_state.confirmar_exclusao_id = None
                                    st.session_state.confirmar_exclusao_nome = None
                        with col_b:
                            if st.button("‚ùå Cancelar", use_container_width=True, key="cancelar_exclusao_btn"):
                                st.session_state.confirmar_exclusao_id = None
                                st.session_state.confirmar_exclusao_nome = None
                                st.info("Exclus√£o cancelada.")
                                st.rerun()
            else:
                st.info("Nenhuma an√°lise encontrada no hist√≥rico deste curso.")
            
            st.markdown("---")
            
            # Upload de PDFs
            st.markdown("#### üìÑ Upload de Ementas")
            st.markdown("""
            <div class="upload-area">
                <p>üìÅ Arraste e solte seus PDFs aqui ou clique para selecionar</p>
                <p><small>M√≠nimo: 1 PDF | M√°ximo: 5 PDFs por lote</small></p>
            </div>
            """, unsafe_allow_html=True)
            
            ementas_data = upload_pdfs(course_code, st.session_state.user_data['prontuario'])
            
            if ementas_data:
                st.success(f"‚úÖ {len(ementas_data)} PDF(s) carregado(s) com sucesso!")
                
                # Bot√£o para processar an√°lises
                if st.button("üîç Processar An√°lises com IA", use_container_width=True):
                    with st.spinner("Processando an√°lises com IA..."):
                        all_analyses = []
                        valid_ementas = 0
                        
                        for ementa_data in ementas_data:
                            # Verificar se a ementa tem ID v√°lido
                            if ementa_data.get('id_ementa') and ementa_data['id_ementa'] is not None:
                                analyses = process_analysis_with_ai(
                                    ementa_data['id_ementa'], 
                                    course_code, 
                                    st.session_state.user_data['prontuario']
                                )
                                all_analyses.extend(analyses)
                                valid_ementas += 1
                            else:
                                st.warning(f"‚ö†Ô∏è Pulando {ementa_data.get('nome_arquivo', 'arquivo')} - ID da ementa inv√°lido")
                        
                        if valid_ementas > 0:
                            st.success(f"‚úÖ An√°lises processadas com sucesso! {valid_ementas} ementa(s) processada(s).")
                            st.session_state.analyses_data = all_analyses
                        else:
                            st.error("‚ùå Nenhuma ementa v√°lida para processar!")
            
            # Exibir an√°lises se existirem
            if 'analyses_data' in st.session_state and st.session_state.analyses_data:
                st.markdown("#### üìä Resultados das An√°lises")
                
                # Usar as an√°lises rec√©m-processadas
                curso_analyses = st.session_state.analyses_data
                
                if curso_analyses:
                    st.markdown("---")
                    st.markdown("### üìà Estat√≠sticas do Curso")
                    
                    # Criar DataFrame com todas as an√°lises do curso
                    df_curso = pd.DataFrame(curso_analyses)
                    
                    # Gr√°fico de pizza por status
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.markdown("##### üéØ Status dos Alunos")
                        status_counts = df_curso['adequado'].value_counts()
                        
                        # Preparar dados para o gr√°fico de pizza
                        labels = ['Adequados' if x else 'N√£o Adequados' for x in status_counts.index]
                        values = status_counts.values
                        colors = ['#28a745', '#dc3545']  # Verde para adequados, vermelho para n√£o adequados
                        
                        # Criar gr√°fico de pizza
                        import plotly.express as px
                        fig_pie = px.pie(
                            values=values, 
                            names=labels, 
                            color_discrete_sequence=colors,
                            title="Distribui√ß√£o por Status"
                        )
                        fig_pie.update_traces(textposition='inside', textinfo='percent+label')
                        st.plotly_chart(fig_pie, use_container_width=True)
                    
                    with col2:
                        st.markdown("##### üìä Distribui√ß√£o de Scores")
                        
                        # Criar histograma de scores
                        fig_hist = px.histogram(
                            df_curso, 
                            x='score', 
                            nbins=10,
                            title="Distribui√ß√£o de Pontua√ß√µes",
                            labels={'score': 'Score', 'count': 'N√∫mero de Alunos'}
                        )
                        fig_hist.update_layout(
                            xaxis_title="Score (0-100)",
                            yaxis_title="N√∫mero de Alunos"
                        )
                        st.plotly_chart(fig_hist, use_container_width=True)
                    
                    # Estat√≠sticas resumidas
                    st.markdown("##### üìã Resumo Estat√≠stico")
                    col1, col2, col3, col4 = st.columns(4)
                    
                    with col1:
                        st.metric("Total de Alunos", len(curso_analyses))
                    
                    with col2:
                        adequados = len(df_curso[df_curso['adequado'] == True])
                        st.metric("Adequados", adequados)
                    
                    with col3:
                        score_medio = df_curso['score'].mean()
                        st.metric("Score M√©dio", f"{score_medio:.1f}")
                    
                    with col4:
                        score_max = df_curso['score'].max()
                        st.metric("Score M√°ximo", score_max)
                    
                    # Tabela de todos os alunos analisados no curso
                    st.markdown("---")
                    st.markdown("### üë• Todos os Alunos Analisados no Curso")
                    
                    # Preparar dados para a tabela
                    df_tabela = df_curso[['analise_id', 'nome_aluno', 'score', 'adequado', 'materias_restantes']].copy()
                    df_tabela.columns = ['ID', 'Nome do Aluno', 'Score', 'Adequado', 'Mat√©rias Restantes']
                    df_tabela['Status'] = df_tabela['Adequado'].apply(lambda x: '‚úÖ Adequado' if x else '‚ùå N√£o Adequado')
                    df_tabela = df_tabela[['ID', 'Nome do Aluno', 'Score', 'Status', 'Mat√©rias Restantes']]
                    
                    # Configurar tabela
                    gb_curso = GridOptionsBuilder.from_dataframe(df_tabela)
                    gb_curso.configure_pagination(paginationAutoPageSize=True)
                    gb_curso.configure_column("Score", header_name="Score", sort="desc")
                    gb_curso.configure_column("Status", header_name="Status")
                    gb_curso.configure_selection(selection_mode="multiple", use_checkbox=True)
                    gb_curso.configure_default_column(enablePivot=True, enableValue=True, enableRowGroup=True)
                    
                    grid_options_curso = gb_curso.build()
                    
                    # Exibir tabela
                    response_curso = AgGrid(
                        df_tabela,
                        grid_options=grid_options_curso,
                        enable_enterprise_modules=True,
                        update_mode=GridUpdateMode.SELECTION_CHANGED,
                        theme='streamlit',
                        height=400
                    )
                    
                    # Detalhes autom√°ticos ao selecionar (curso)
                    selected_rows_curso = response_curso.get('selected_rows', []) if response_curso else []
                    
                    if selected_rows_curso and len(selected_rows_curso) == 1:
                        row = selected_rows_curso[0]
                        analise_completa = database.get_analise_by_id(row['ID'])
                        
                        if analise_completa:
                            st.markdown("---")
                            st.markdown(f"### üìã Detalhes da An√°lise - {row['Nome do Aluno']}")
                            
                            # Cards com informa√ß√µes principais
                            col1, col2, col3, col4 = st.columns(4)
                            with col1:
                                st.metric("üìä Score", f"{row['Score']}/100")
                            with col2:
                                st.metric("‚úÖ Status", "Adequado" if analise_completa['adequado'] else "N√£o Adequado")
                            with col3:
                                if 'created_at' in analise_completa:
                                    from datetime import datetime
                                    data = datetime.fromisoformat(analise_completa['created_at'].replace('Z', '+00:00'))
                                    st.metric("üìÖ Data", data.strftime('%d/%m/%Y'))
                            with col4:
                                metodo = "IA" if analise_completa.get('dados_estruturados_json') else "Regex"
                                st.metric("üîß M√©todo", metodo)
                            
                            # An√°lise da IA
                            with st.expander("ü§ñ An√°lise Completa da IA", expanded=True):
                                st.markdown(analise_completa['texto_analise'])
                            
                            # Dados Estruturados Extra√≠dos
                            if analise_completa.get('dados_estruturados_json'):
                                try:
                                    dados_estruturados = json.loads(analise_completa['dados_estruturados_json'])
                                    
                                    with st.expander("üìä Dados Estruturados Extra√≠dos", expanded=True):
                                        # Informa√ß√µes do Aluno
                                        st.markdown("#### üë§ Informa√ß√µes do Aluno")
                                        student_info = dados_estruturados.get('student_info', {})
                                        
                                        col_a, col_b = st.columns(2)
                                        with col_a:
                                            st.markdown(f"**Nome:** {student_info.get('nome', 'N/A')}")
                                            st.markdown(f"**RA:** {student_info.get('ra', 'N/A')}")
                                            st.markdown(f"**CPF:** {student_info.get('cpf', 'N/A')}")
                                        with col_b:
                                            st.markdown(f"**Curso:** {student_info.get('curso', 'N/A')}")
                                            st.markdown(f"**Data Matr√≠cula:** {student_info.get('data_matricula', 'N/A')}")
                                            st.markdown(f"**Per√≠odo Ingresso:** {student_info.get('periodo_ingresso', 'N/A')}")
                                        
                                        # Informa√ß√µes de Extra√ß√£o
                                        extraction_info = dados_estruturados.get('extraction_info', {})
                                        if extraction_info:
                                            st.markdown("#### üîß Informa√ß√µes da Extra√ß√£o")
                                            col_c, col_d, col_e = st.columns(3)
                                            with col_c:
                                                st.markdown(f"**M√©todo:** {extraction_info.get('method', 'N/A')}")
                                            with col_d:
                                                confianca = extraction_info.get('confidence', 0)
                                                st.markdown(f"**Confian√ßa:** {confianca:.2%}")
                                            with col_e:
                                                st.markdown(f"**Formato:** {extraction_info.get('detected_format', 'N/A')}")
                                        
                                        # Disciplinas (se existirem)
                                        disciplines = dados_estruturados.get('disciplines', [])
                                        if disciplines:
                                            st.markdown("#### üìö Disciplinas Extra√≠das")
                                            df_disciplines = pd.DataFrame(disciplines)
                                            st.dataframe(df_disciplines, use_container_width=True)
                                        
                                        # JSON Completo
                                        with st.expander("üîç Ver JSON Completo"):
                                            st.json(dados_estruturados)
                                            
                                except Exception as e:
                                    st.warning(f"Erro ao processar dados estruturados: {e}")
                            else:
                                st.info("üí° Esta an√°lise foi processada antes da implementa√ß√£o do sistema de extra√ß√£o estruturada")
                    
                    st.markdown("---")
                
                # Se√ß√£o: Estat√≠sticas por Curso
                st.markdown("### üìä Estat√≠sticas por Curso")
                estatisticas_cursos = database.get_estatisticas_por_curso_do_professor(st.session_state.user_data['prontuario'])
                
                if estatisticas_cursos:
                    # Criar DataFrame com estat√≠sticas
                    df_estatisticas = pd.DataFrame(estatisticas_cursos)
                    
                    # Configurar tabela de estat√≠sticas
                    gb_estatisticas = GridOptionsBuilder.from_dataframe(df_estatisticas)
                    gb_estatisticas.configure_pagination(paginationAutoPageSize=True)
                    gb_estatisticas.configure_column("total_analises", header_name="Total An√°lises", sort="desc")
                    gb_estatisticas.configure_column("media_score", header_name="M√©dia Score", sort="desc")
                    gb_estatisticas.configure_column("taxa_adequacao", header_name="Taxa Adequa√ß√£o")
                    gb_estatisticas.configure_default_column(enablePivot=True, enableValue=True, enableRowGroup=True)
                    
                    grid_options_estatisticas = gb_estatisticas.build()
                    
                    # Exibir tabela de estat√≠sticas
                    AgGrid(
                        df_estatisticas,
                        grid_options=grid_options_estatisticas,
                        enable_enterprise_modules=True,
                        update_mode=GridUpdateMode.SELECTION_CHANGED,
                        theme='streamlit',
                        height=300
                    )
                else:
                    st.info("Nenhuma estat√≠stica encontrada. Fa√ßa algumas an√°lises para ver as estat√≠sticas por curso.")
                
                st.markdown("---")
                
                # Se√ß√£o duplicada removida - hist√≥rico agora est√° no topo, sempre vis√≠vel
                if False:  # C√≥digo antigo mantido para refer√™ncia - N√ÉO USAR
                    pass
                
                if False:
                    # Criar DataFrame com hist√≥rico
                    df_historico = pd.DataFrame(historico_analyses)
                    
                    # Estat√≠sticas do hist√≥rico
                    col1, col2, col3, col4 = st.columns(4)
                    
                    with col1:
                        st.metric("Total Hist√≥rico", len(historico_analyses))
                    
                    with col2:
                        adequados_historico = len(df_historico[df_historico['adequado'] == True])
                        st.metric("Adequados", adequados_historico)
                    
                    with col3:
                        score_medio_historico = df_historico['score'].mean()
                        st.metric("Score M√©dio", f"{score_medio_historico:.1f}")
                    
                    with col4:
                        score_max_historico = df_historico['score'].max()
                        st.metric("Score M√°ximo", score_max_historico)
                    
                    # Tabela do hist√≥rico
                    df_tabela_historico = df_historico[['analise_id', 'nome_aluno', 'score', 'adequado', 'materias_restantes']].copy()
                    df_tabela_historico.columns = ['ID', 'Nome do Aluno', 'Score', 'Adequado', 'Mat√©rias Restantes']
                    df_tabela_historico['Status'] = df_tabela_historico['Adequado'].apply(lambda x: '‚úÖ Adequado' if x else '‚ùå N√£o Adequado')
                    df_tabela_historico = df_tabela_historico[['ID', 'Nome do Aluno', 'Score', 'Status', 'Mat√©rias Restantes']]
                    
                    # Configurar tabela do hist√≥rico
                    gb_historico = GridOptionsBuilder.from_dataframe(df_tabela_historico)
                    gb_historico.configure_pagination(paginationAutoPageSize=True)
                    gb_historico.configure_column("Score", header_name="Score", sort="desc")
                    gb_historico.configure_column("Status", header_name="Status")
                    gb_historico.configure_selection(selection_mode="multiple", use_checkbox=True)
                    gb_historico.configure_default_column(enablePivot=True, enableValue=True, enableRowGroup=True)
                    
                    grid_options_historico = gb_historico.build()
                    
                    # Exibir tabela do hist√≥rico
                    response_historico = AgGrid(
                        df_tabela_historico,
                        grid_options=grid_options_historico,
                        enable_enterprise_modules=True,
                        update_mode=GridUpdateMode.SELECTION_CHANGED,
                        theme='streamlit',
                        height=400
                    )
                else:
                    st.info("Nenhuma an√°lise encontrada no hist√≥rico deste curso.")
                
                st.markdown("---")
                
                # Se√ß√£o: Detalhes e A√ß√µes das An√°lises
                if historico_analyses:
                    st.markdown("### üîç Detalhes e A√ß√µes das An√°lises")
                    st.markdown("Selecione uma ou mais an√°lises na tabela acima e escolha uma a√ß√£o:")
                    
                    col1, col2, col3 = st.columns(3)
                    
                    with col1:
                        if st.button("üìÑ Ver Detalhes Completos", use_container_width=True):
                            selected_rows = response_historico.get('selected_rows', []) if response_historico else []
                            if selected_rows:
                                for row in selected_rows:
                                    # Buscar an√°lise completa
                                    analise_completa = database.get_analise_by_id(row['ID'])
                                    if analise_completa:
                                        with st.expander(f"üìã {row['Nome do Aluno']} - Score: {row['Score']}", expanded=True):
                                            st.markdown("**ü§ñ An√°lise da IA:**")
                                            st.markdown(analise_completa['texto_analise'])
                                            st.markdown("---")
                                            col_a, col_b = st.columns(2)
                                            with col_a:
                                                st.markdown(f"**üìä Score:** {row['Score']}/100")
                                                st.markdown(f"**‚úÖ Status:** {row['Status']}")
                                            with col_b:
                                                st.markdown(f"**üìö Mat√©rias Restantes:** {row['Mat√©rias Restantes']}")
                                                if 'created_at' in analise_completa:
                                                    st.markdown(f"**üìÖ Data:** {analise_completa['created_at']}")
                                            
                                            # Mostrar dados estruturados se existirem
                                            if analise_completa.get('dados_estruturados_json'):
                                                with st.expander("üìä Dados Estruturados (Docling)"):
                                                    try:
                                                        dados_estruturados = json.loads(analise_completa['dados_estruturados_json'])
                                                        st.json(dados_estruturados)
                                                    except:
                                                        st.warning("Dados estruturados n√£o dispon√≠veis")
                            else:
                                st.info("Selecione pelo menos uma an√°lise na tabela")
                    
                    with col2:
                        if st.button("üìä Comparar An√°lises", use_container_width=True):
                            selected_rows = response_historico.get('selected_rows', []) if response_historico else []
                            if len(selected_rows) >= 2:
                                st.markdown("##### üìä Compara√ß√£o de An√°lises")
                                df_compare = pd.DataFrame(selected_rows)
                                st.dataframe(df_compare[['Nome do Aluno', 'Score', 'Status']], use_container_width=True)
                                
                                # Gr√°fico de compara√ß√£o
                                fig_compare = px.bar(
                                    df_compare,
                                    x='Nome do Aluno',
                                    y='Score',
                                    title="Compara√ß√£o de Scores",
                                    color='Score',
                                    color_continuous_scale='RdYlGn'
                                )
                                st.plotly_chart(fig_compare, use_container_width=True)
                            else:
                                st.info("Selecione pelo menos 2 an√°lises para comparar")
                    
                    with col3:
                        if st.button("üì• Exportar Selecionadas", use_container_width=True):
                            selected_rows = response_historico.get('selected_rows', []) if response_historico else []
                            if selected_rows:
                                df_export = pd.DataFrame(selected_rows)
                                csv = df_export.to_csv(index=False)
                                st.download_button(
                                    label="‚¨áÔ∏è Baixar CSV",
                                    data=csv,
                                    file_name=f"analises_{course_code}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                                    mime="text/csv",
                                    use_container_width=True
                                )
                                st.success("Arquivo CSV pronto para download!")
                            else:
                                st.info("Selecione pelo menos uma an√°lise para exportar")
                    
                # Se√ß√£o removida: duplica√ß√£o com hist√≥rico acima
                
                # Usar historico_analyses ao inv√©s de buscar novamente
                minhas_analises = historico_analyses
                
                if False:  # Desabilitado - c√≥digo mantido para refer√™ncia
                    # Criar DataFrame com minhas an√°lises
                    df_minhas = pd.DataFrame(minhas_analises)
                    
                    # Estat√≠sticas das minhas an√°lises
                    col1, col2, col3, col4 = st.columns(4)
                    
                    with col1:
                        st.metric("Minhas An√°lises", len(minhas_analises))
                    
                    with col2:
                        adequadas_minhas = len(df_minhas[df_minhas['adequado'] == True])
                        st.metric("Adequadas", adequadas_minhas)
                    
                    with col3:
                        score_medio_minhas = df_minhas['score'].mean()
                        st.metric("Score M√©dio", f"{score_medio_minhas:.1f}")
                    
                    with col4:
                        score_max_minhas = df_minhas['score'].max()
                        st.metric("Score M√°ximo", score_max_minhas)
                    
                    # Tabela das minhas an√°lises
                    df_tabela_minhas = df_minhas[['analise_id', 'nome_aluno', 'score', 'adequado', 'materias_restantes', 'created_at']].copy()
                    df_tabela_minhas.columns = ['ID', 'Nome do Aluno', 'Score', 'Adequado', 'Mat√©rias Restantes', 'Data']
                    df_tabela_minhas['Status'] = df_tabela_minhas['Adequado'].apply(lambda x: '‚úÖ Adequado' if x else '‚ùå N√£o Adequado')
                    df_tabela_minhas = df_tabela_minhas[['ID', 'Nome do Aluno', 'Score', 'Status', 'Mat√©rias Restantes', 'Data']]
                    
                    # Configurar tabela das minhas an√°lises
                    gb_minhas = GridOptionsBuilder.from_dataframe(df_tabela_minhas)
                    gb_minhas.configure_pagination(paginationAutoPageSize=True)
                    gb_minhas.configure_column("Score", header_name="Score", sort="desc")
                    gb_minhas.configure_column("Status", header_name="Status")
                    gb_minhas.configure_column("Data", header_name="Data", sort="desc")
                    gb_minhas.configure_selection(selection_mode="multiple", use_checkbox=True)
                    gb_minhas.configure_default_column(enablePivot=True, enableValue=True, enableRowGroup=True)
                    
                    grid_options_minhas = gb_minhas.build()
                    
                    # Exibir tabela das minhas an√°lises
                    response_minhas = AgGrid(
                        df_tabela_minhas,
                        grid_options=grid_options_minhas,
                        enable_enterprise_modules=True,
                        update_mode=GridUpdateMode.SELECTION_CHANGED,
                        theme='streamlit',
                        height=300
                    )
                    
                    # Bot√µes de a√ß√£o para minhas an√°lises
                    st.markdown("##### ‚öôÔ∏è A√ß√µes das Minhas An√°lises")
                    col1, col2, col3 = st.columns(3)
                    
                    with col1:
                        if st.button("üìÑ Ver An√°lise Detalhada", use_container_width=True):
                            selected_rows = response_minhas.get('selected_rows', []) if response_minhas else []
                            if selected_rows:
                                for row in selected_rows:
                                    # Buscar an√°lise completa
                                    analise_completa = database.get_analise_by_id(row['ID'])
                                    if analise_completa:
                                        st.markdown(f"##### üìã An√°lise Detalhada - {row['Nome do Aluno']}")
                                        st.markdown("**Resposta da IA:**")
                                        st.markdown(analise_completa['texto_analise'])
                                        st.markdown("---")
                                        st.markdown(f"**üìä Score:** {row['Score']}/100")
                                        st.markdown(f"**üìö Mat√©rias Restantes:** {row['Mat√©rias Restantes']}")
                                        st.markdown(f"**‚úÖ Status:** {'Adequado para o curso' if row['Adequado'] else 'Precisa de melhorias'}")
                                        st.markdown(f"**üìÖ Data:** {row['Data']}")
                            else:
                                st.info("Selecione uma an√°lise para ver detalhes")
                    
                    with col2:
                        if st.button("üóëÔ∏è Deletar An√°lise", use_container_width=True):
                            selected_rows = response_minhas.get('selected_rows', []) if response_minhas else []
                            if selected_rows:
                                for row in selected_rows:
                                    analise_id = row['ID']
                                    if database.delete_analise(analise_id, st.session_state.user_data['prontuario']):
                                        st.success(f"‚úÖ An√°lise de {row['Nome do Aluno']} deletada!")
                                        st.rerun()
                                    else:
                                        st.error("‚ùå Erro ao deletar an√°lise")
                            else:
                                st.info("Selecione uma an√°lise para deletar")
                    
                    with col3:
                        if st.button("üìä Estat√≠sticas Detalhadas", use_container_width=True):
                            st.markdown("##### üìà Estat√≠sticas Detalhadas das Minhas An√°lises")
                            
                            # Gr√°fico de distribui√ß√£o de scores
                            fig_hist_minhas = px.histogram(
                                df_minhas, 
                                x='score', 
                                nbins=10,
                                title="Distribui√ß√£o de Pontua√ß√µes - Minhas An√°lises",
                                labels={'score': 'Score', 'count': 'N√∫mero de An√°lises'}
                            )
                            fig_hist_minhas.update_layout(
                                xaxis_title="Score (0-100)",
                                yaxis_title="N√∫mero de An√°lises"
                            )
                            st.plotly_chart(fig_hist_minhas, use_container_width=True)
                            
                            # Gr√°fico de pizza por status
                            status_counts_minhas = df_minhas['adequado'].value_counts()
                            labels_minhas = ['Adequados' if x else 'N√£o Adequados' for x in status_counts_minhas.index]
                            values_minhas = status_counts_minhas.values
                            colors_minhas = ['#28a745', '#dc3545']
                            
                            fig_pie_minhas = px.pie(
                                values=values_minhas, 
                                names=labels_minhas, 
                                color_discrete_sequence=colors_minhas,
                                title="Distribui√ß√£o por Status - Minhas An√°lises"
                            )
                            fig_pie_minhas.update_traces(textposition='inside', textinfo='percent+label')
                            st.plotly_chart(fig_pie_minhas, use_container_width=True)
                else:
                    st.info("Voc√™ ainda n√£o realizou an√°lises para este curso.")
                
                st.markdown("---")
                
                # Exibir resultado da an√°lise de forma centralizada
                if len(st.session_state.analyses_data) == 1:
                    # Se h√° apenas uma an√°lise, exibir de forma destacada
                    analise = st.session_state.analyses_data[0]
                    
                    # Container centralizado para o resultado
                    st.markdown("---")
                    st.markdown("### ü§ñ An√°lise da IA")
                    
                    # Card com informa√ß√µes principais
                    col1, col2, col3 = st.columns([2, 1, 1])
                    
                    with col1:
                        st.markdown(f"**üë§ Aluno:** {analise['nome_aluno']}")
                    
                    with col2:
                        score_color = "üü¢" if analise['score'] >= 70 else "üü°" if analise['score'] >= 50 else "üî¥"
                        st.markdown(f"**üìä Score:** {score_color} {analise['score']}/100")
                    
                    with col3:
                        status = "‚úÖ Adequado" if analise['adequado'] else "‚ùå N√£o Adequado"
                        st.markdown(f"**Status:** {status}")
                    
                    # Exibir o texto da an√°lise de forma destacada
                    st.markdown("---")
                    st.markdown("### üìù An√°lise Detalhada")
                    
                    # Container com estilo para o texto da IA
                    st.markdown("""
                    <div style="
                        background-color: #f8f9fa;
                        border: 2px solid #e9ecef;
                        border-radius: 10px;
                        padding: 20px;
                        margin: 20px 0;
                        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                        text-align: left;
                        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                        line-height: 1.6;
                    ">
                    """, unsafe_allow_html=True)
                    
                    # Exibir o texto da an√°lise
                    st.markdown(analise['texto_analise'])
                    
                    st.markdown("</div>", unsafe_allow_html=True)
                    
                    # Informa√ß√µes adicionais
                    st.markdown("---")
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.markdown(f"**üìö Mat√©rias Restantes:** {analise['materias_restantes']}")
                    
                    with col2:
                        st.markdown(f"**üÜî ID da An√°lise:** {analise['analise_id']}")
                
                # Criar DataFrame para a tabela (simplificada)
                df = pd.DataFrame(st.session_state.analyses_data)
                
                # Adicionar coluna de an√°lise e id_ementa se n√£o existir
                if 'ementa_fk' not in df.columns:
                    df['ementa_fk'] = None
                if 'texto_analise' not in df.columns:
                    df['texto_analise'] = ''
                
                # Selecionar colunas e renomear
                df_display = df[['analise_id', 'nome_aluno', 'score', 'adequado', 'materias_restantes']].copy()
                df_display.columns = ['ID', 'Nome', 'Score', 'Adequado', 'Mat√©rias Restantes']
                
                # Criar c√≥pia completa com dados extras para os bot√µes
                df_full = df[['analise_id', 'nome_aluno', 'score', 'adequado', 'materias_restantes', 'ementa_fk', 'texto_analise']].copy()
                df_full.columns = ['ID', 'Nome', 'Score', 'Adequado', 'Mat√©rias Restantes', 'id_ementa', 'An√°lise']
                df = df_display  # Usar display simplificado para visualiza√ß√£o
                
                # Se h√° m√∫ltiplas an√°lises, exibir tabela resumida
                if len(st.session_state.analyses_data) > 1:
                    st.markdown("---")
                    st.markdown("### üìã Resumo das An√°lises")
                    
                    # Exibir gr√°fico de barras
                    st.markdown("##### üìà Gr√°fico de Pontua√ß√µes")
                    chart_data = df[['Nome', 'Score']].set_index('Nome')
                    st.bar_chart(chart_data)
                    
                    # Configurar tabela AgGrid
                    gb = GridOptionsBuilder.from_dataframe(df)
                    gb.configure_pagination(paginationAutoPageSize=True)
                    gb.configure_column("Score", header_name="Score", sort="desc")
                    gb.configure_column("Adequado", header_name="Adequado", cellRenderer="agCheckboxCellRenderer")
                    gb.configure_selection(selection_mode="multiple", use_checkbox=True)
                    gb.configure_default_column(enablePivot=True, enableValue=True, enableRowGroup=True)
                    
                    grid_options = gb.build()
                    
                    # Exibir tabela interativa
                    st.markdown("##### üìä Tabela de An√°lises")
                    response = AgGrid(
                        df,
                        grid_options=grid_options,
                        enable_enterprise_modules=True,
                        update_mode=GridUpdateMode.SELECTION_CHANGED,
                        theme='streamlit',
                        height=300
                    )
                else:
                    # Para an√°lise √∫nica, n√£o exibir tabela
                    response = None
                    selected_rows = []
                
                # Obter an√°lises selecionadas
                if response:
                    raw_selected = response.get('selected_rows', []) if response else []
                    
                    # Debug tempor√°rio
                    with st.expander("üîç Debug - Sele√ß√µes", expanded=False):
                        st.write(f"Linhas retornadas pelo AgGrid: {len(raw_selected)}")
                        if raw_selected:
                            st.write("Primeira linha selecionada:")
                            st.json(raw_selected[0])
                    
                    selected_rows_ids = [row.get('ID') for row in raw_selected]
                    
                    # Buscar dados completos das an√°lises selecionadas
                    selected_rows = []
                    for analise in st.session_state.analyses_data:
                        if analise.get('analise_id') in selected_rows_ids:
                            selected_rows.append({
                                'ID': analise.get('analise_id'),
                                'Nome': analise.get('nome_aluno'),
                                'Score': analise.get('score'),
                                'Adequado': analise.get('adequado'),
                                'Mat√©rias Restantes': analise.get('materias_restantes'),
                                'id_ementa': analise.get('ementa_fk'),
                                'An√°lise': analise.get('texto_analise', '')
                            })
                else:
                    # Se h√° apenas uma an√°lise, usar ela automaticamente
                    if len(st.session_state.analyses_data) == 1:
                        analise = st.session_state.analyses_data[0]
                        selected_rows = [{
                            'ID': analise.get('analise_id'),
                            'Nome': analise.get('nome_aluno'),
                            'Score': analise.get('score'),
                            'Adequado': analise.get('adequado'),
                            'Mat√©rias Restantes': analise.get('materias_restantes'),
                            'id_ementa': analise.get('ementa_fk'),
                            'An√°lise': analise.get('texto_analise', '')
                        }]
                    else:
                        selected_rows = []
                
                # Mostrar preview das an√°lises selecionadas
                if selected_rows and len(selected_rows) > 0:
                    if len(selected_rows) == 1:
                        st.success(f"‚úÖ 1 an√°lise pronta para a√ß√£o: **{selected_rows[0]['Nome']}**")
                    else:
                        nomes = [row['Nome'] for row in selected_rows]
                        st.success(f"‚úÖ {len(selected_rows)} an√°lises selecionadas: {', '.join(nomes)}")
                
                # Bot√µes de a√ß√£o
                st.markdown("##### ‚öôÔ∏è A√ß√µes")
                col1, col2, col3, col4 = st.columns(4)
                
                with col1:
                    if st.button("üì• Download Ementa", use_container_width=True):
                        # Verificar se h√° ementas selecionadas
                        if selected_rows:
                            for row in selected_rows:
                                # Buscar ementa no banco
                                ementa_data = database.get_ementa_by_id(row.get('id_ementa', 0))
                                if ementa_data and ementa_data.get('drive_id'):
                                    drive_id = ementa_data['drive_id']
                                    
                                    # Verificar se √© do Google Drive
                                    if drive_id.startswith('local_'):
                                        st.warning("üìÇ Arquivo salvo apenas localmente")
                                    else:
                                        # Download do Google Drive
                                        with st.spinner("üì• Baixando do Google Drive..."):
                                            file_content = drive_service.download_file(
                                                drive_id, 
                                                f"ementa_{row['Nome']}.pdf"
                                            )
                                        
                                        if file_content:
                                            st.download_button(
                                                label=f"üìÑ Download {row['Nome']}.pdf",
                                                data=file_content,
                                                file_name=f"ementa_{row['Nome']}.pdf",
                                                mime="application/pdf",
                                                key=f"download_{row.get('ID', 0)}"
                                            )
                                            st.success("‚úÖ Pronto para download!")
                                        else:
                                            st.error("‚ùå Erro ao baixar do Google Drive")
                                else:
                                    st.info("üí° Ementa n√£o encontrada no banco de dados")
                        else:
                            st.info("üìù Nenhuma an√°lise dispon√≠vel")
                
                with col2:
                    if st.button("üóëÔ∏è Deletar An√°lise", use_container_width=True):
                        if selected_rows:
                            for row in selected_rows:
                                analise_id = row.get('ID', 0)
                                if database.delete_analise(analise_id, st.session_state.user_data['prontuario']):
                                    st.success(f"‚úÖ An√°lise de {row['Nome']} deletada!")
                                    # Remover da lista de an√°lises
                                    st.session_state.analyses_data = [
                                        a for a in st.session_state.analyses_data 
                                        if a.get('analise_id') != analise_id
                                    ]
                                    st.rerun()
                                else:
                                    st.error("‚ùå Erro ao deletar an√°lise")
                        else:
                            st.info("Selecione uma an√°lise para deletar")
                
                with col3:
                    if st.button("üìÑ Ver An√°lise Detalhada", use_container_width=True):
                        if selected_rows:
                            for row in selected_rows:
                                with st.expander(f"üìã An√°lise Detalhada - {row['Nome']}", expanded=True):
                                    # Buscar dados completos do banco
                                    analise_completa = database.get_analise_by_id(row.get('ID'))
                                    
                                    if analise_completa:
                                        # An√°lise da IA
                                        st.markdown("**ü§ñ An√°lise da IA:**")
                                        st.markdown(analise_completa.get('texto_analise', row.get('An√°lise', '')))
                                        st.markdown("---")
                                        
                                        # Dados estruturados se existirem
                                        if analise_completa.get('dados_estruturados_json'):
                                            try:
                                                dados_estruturados = json.loads(analise_completa['dados_estruturados_json'])
                                                
                                                st.markdown("**üìä Dados Estruturados:**")
                                                student_info = dados_estruturados.get('student_info', {})
                                                
                                                col_a, col_b = st.columns(2)
                                                with col_a:
                                                    st.markdown(f"**Nome:** {student_info.get('nome', 'N/A')}")
                                                    st.markdown(f"**RA:** {student_info.get('ra', 'N/A')}")
                                                    st.markdown(f"**CPF:** {student_info.get('cpf', 'N/A')}")
                                                with col_b:
                                                    st.markdown(f"**Curso:** {student_info.get('curso', 'N/A')}")
                                                    st.markdown(f"**Data Matr√≠cula:** {student_info.get('data_matricula', 'N/A')}")
                                                    
                                                with st.expander("üîç Ver JSON Completo"):
                                                    st.json(dados_estruturados)
                                            except:
                                                pass
                                    else:
                                        st.markdown("**ü§ñ Resposta da IA:**")
                                        st.markdown(row.get('An√°lise', 'An√°lise n√£o dispon√≠vel'))
                        else:
                            st.info("üìù Nenhuma an√°lise dispon√≠vel")
                
                with col4:
                    if st.button("üßπ Limpar An√°lises", use_container_width=True):
                        if 'analyses_data' in st.session_state:
                            del st.session_state.analyses_data
                        st.success("An√°lises limpas!")
                        st.rerun()
                
                # Exibir an√°lises selecionadas
                if selected_rows:
                    st.markdown("##### üëÄ An√°lises Selecionadas")
                    for row in selected_rows:
                        with st.expander(f"üìÑ {row['Nome']} - Score: {row['Score']} - {'‚úÖ Adequado' if row['Adequado'] else '‚ùå N√£o Adequado'}"):
                            st.markdown("**ü§ñ Resposta Completa da IA:**")
                            st.markdown(row['An√°lise'])
                            st.markdown("---")
                            st.markdown(f"**üìä Score:** {row['Score']}/100")
                            st.markdown(f"**üìö Mat√©rias Restantes:** {row['Mat√©rias Restantes']}")
                            st.markdown(f"**‚úÖ Status:** {'Adequado para o curso' if row['Adequado'] else 'Precisa de melhorias'}")
